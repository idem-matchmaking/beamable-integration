//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Microservices.IdemMicroservice"/> </summary
    public sealed class IdemMicroserviceClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public IdemMicroserviceClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "IdemMicroservice";
            }
        }
        
        /// <summary>
        /// Call the DebugGetPlayers method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.DebugGetPlayers"/>
        /// </summary>
        public Beamable.Common.Promise<string> DebugGetPlayers(string gameId)
        {
            object raw_gameId = gameId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("gameId", raw_gameId);
            return this.Request<string>("IdemMicroservice", "DebugGetPlayers", serializedFields);
        }
        
        /// <summary>
        /// Call the DebugGetMatches method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.DebugGetMatches"/>
        /// </summary>
        public Beamable.Common.Promise<string> DebugGetMatches(string gameId)
        {
            object raw_gameId = gameId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("gameId", raw_gameId);
            return this.Request<string>("IdemMicroservice", "DebugGetMatches", serializedFields);
        }
        
        /// <summary>
        /// Call the DebugGetRecentPlayer method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.DebugGetRecentPlayer"/>
        /// </summary>
        public Beamable.Common.Promise<string> DebugGetRecentPlayer(string anyPlayerId)
        {
            object raw_anyPlayerId = anyPlayerId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("anyPlayerId", raw_anyPlayerId);
            return this.Request<string>("IdemMicroservice", "DebugGetRecentPlayer", serializedFields);
        }
        
        /// <summary>
        /// Call the StartMatchmaking method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.StartMatchmaking"/>
        /// </summary>
        public Beamable.Common.Promise<string> StartMatchmaking(string gameMode, string[] servers)
        {
            object raw_gameMode = gameMode;
            object raw_servers = servers;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("gameMode", raw_gameMode);
            serializedFields.Add("servers", raw_servers);
            return this.Request<string>("IdemMicroservice", "StartMatchmaking", serializedFields);
        }
        
        /// <summary>
        /// Call the StopMatchmaking method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.StopMatchmaking"/>
        /// </summary>
        public Beamable.Common.Promise<string> StopMatchmaking()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<string>("IdemMicroservice", "StopMatchmaking", serializedFields);
        }
        
        /// <summary>
        /// Call the GetMatchmakingStatus method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.GetMatchmakingStatus"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetMatchmakingStatus()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<string>("IdemMicroservice", "GetMatchmakingStatus", serializedFields);
        }
        
        /// <summary>
        /// Call the ConfirmMatch method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.ConfirmMatch"/>
        /// </summary>
        public Beamable.Common.Promise<string> ConfirmMatch(string matchId)
        {
            object raw_matchId = matchId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("matchId", raw_matchId);
            return this.Request<string>("IdemMicroservice", "ConfirmMatch", serializedFields);
        }
        
        /// <summary>
        /// Call the CompleteMatch method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.CompleteMatch"/>
        /// </summary>
        public Beamable.Common.Promise<string> CompleteMatch(string payload)
        {
            object raw_payload = payload;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("payload", raw_payload);
            return this.Request<string>("IdemMicroservice", "CompleteMatch", serializedFields);
        }
        
        /// <summary>
        /// Call the RequestBackfilling method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.RequestBackfilling"/>
        /// </summary>
        public Beamable.Common.Promise<string> RequestBackfilling(string payload, string requestKey)
        {
            object raw_payload = payload;
            object raw_requestKey = requestKey;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("payload", raw_payload);
            serializedFields.Add("requestKey", raw_requestKey);
            return this.Request<string>("IdemMicroservice", "RequestBackfilling", serializedFields);
        }
        
        /// <summary>
        /// Call the CancelBackfilling method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.CancelBackfilling"/>
        /// </summary>
        public Beamable.Common.Promise<string> CancelBackfilling(string matchId, string backfillingRequestId, string requestKey)
        {
            object raw_matchId = matchId;
            object raw_backfillingRequestId = backfillingRequestId;
            object raw_requestKey = requestKey;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("matchId", raw_matchId);
            serializedFields.Add("backfillingRequestId", raw_backfillingRequestId);
            serializedFields.Add("requestKey", raw_requestKey);
            return this.Request<string>("IdemMicroservice", "CancelBackfilling", serializedFields);
        }
        
        /// <summary>
        /// Call the QueueCount method on the IdemMicroservice microservice
        /// <see cref="Beamable.Microservices.IdemMicroservice.QueueCount"/>
        /// </summary>
        public Beamable.Common.Promise<string> QueueCount(string gameMode, int minSecondsWait, string requestKey)
        {
            object raw_gameMode = gameMode;
            object raw_minSecondsWait = minSecondsWait;
            object raw_requestKey = requestKey;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("gameMode", raw_gameMode);
            serializedFields.Add("minSecondsWait", raw_minSecondsWait);
            serializedFields.Add("requestKey", raw_requestKey);
            return this.Request<string>("IdemMicroservice", "QueueCount", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersIdemMicroserviceClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Array_System_String : MicroserviceClientDataWrapper<string[]>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Int32 : MicroserviceClientDataWrapper<int>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForIdemMicroserviceClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<IdemMicroserviceClient>();
        }
        
        public static IdemMicroserviceClient IdemMicroservice(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<IdemMicroserviceClient>();
        }
    }
}
